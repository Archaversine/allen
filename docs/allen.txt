-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/archaversine/allen#readme</a>
@package allen
@version 0.1.0.0


-- | <ul>
--   <li>Module : Data.Allen.Types</li>
--   <li>Description : Types for Allen's interval algebra.</li>
--   <li>Maintainer : Archaversine |</li>
--   </ul>
module Data.Allen.Types
data Interval
Interval :: Int -> Map IntervalID RelationBits -> Interval
[intervalID] :: Interval -> Int
[intervalRelations] :: Interval -> Map IntervalID RelationBits
type Allen = State IntervalGraph
type IntervalID = Int
type IntervalGraph = Map IntervalID Interval
data Relation
Precedes :: Relation
Meets :: Relation
Overlaps :: Relation
FinishedBy :: Relation
Contains :: Relation
Starts :: Relation
Equals :: Relation
StartedBy :: Relation
During :: Relation
Finishes :: Relation
OverlappedBy :: Relation
MetBy :: Relation
PrecededBy :: Relation
type RelationBits = Word16

-- | List of all possible relations.
allRelations :: [Relation]

-- | Bit representation of all possible relations.
allRelationBits :: RelationBits

-- | Convert a Relation type to its bit representation.
toBits :: Relation -> RelationBits

-- | Convert a bit representation to a list of Relation types.
fromBits :: RelationBits -> [Relation]

-- | Calculate the union of a list of relations.
relationUnion :: [RelationBits] -> RelationBits

-- | Calculate the intersection of a list of relations.
relationIntersection :: [RelationBits] -> RelationBits

-- | Return the interval given it's ID. Panics if ID doesn't exist.
fromID :: IntervalID -> Allen Interval
instance GHC.Enum.Bounded Data.Allen.Types.Relation
instance GHC.Enum.Enum Data.Allen.Types.Relation
instance GHC.Show.Show Data.Allen.Types.Relation
instance GHC.Classes.Eq Data.Allen.Types.Relation
instance GHC.Show.Show Data.Allen.Types.Interval


-- | <ul>
--   <li>Module : Data.Allen.Relation</li>
--   <li>Description : Functions for working with Allen's interval algebra
--   relations.</li>
--   <li>Maintainer : Archaversine |</li>
--   </ul>
module Data.Allen.Relation

-- | Return the converse of a Relation bitset.
converse :: RelationBits -> RelationBits

-- | Return if a relation exists between two intervals.
hasRelation :: Relation -> IntervalID -> IntervalID -> Allen Bool

-- | Compose two relations.
composeSingle :: Relation -> Relation -> RelationBits

-- | Compose two sets of relations.
compose :: RelationBits -> RelationBits -> RelationBits

-- | Same as <a>relationFromChar</a> but for multiple chars.
bitsFromString :: String -> RelationBits


-- | <ul>
--   <li>Module : Data.Allen.Interval</li>
--   <li>Description : Functions for working with intervals.</li>
--   <li>Maintainer : Archaversine |</li>
--   </ul>
module Data.Allen.Interval

-- | Create a new interval. Returns the interval ID.
interval :: Allen IntervalID

-- | Return the number of intervals that are currently in the graph.
intervalCount :: Allen Int

-- | Return the interval given it's ID. Panics if ID doesn't exist.
fromID :: IntervalID -> Allen Interval

-- | Define a relation between two intervals.
assume :: IntervalID -> Relation -> IntervalID -> Allen ()

-- | Define a set of relations between two intervals.
assumeSet :: IntervalID -> [Relation] -> IntervalID -> Allen ()

-- | Define a relation between two intervals using RelationBits.
assumeBits :: IntervalID -> RelationBits -> IntervalID -> Allen ()

-- | Set the relations between two intervals.
setRelation :: Interval -> RelationBits -> IntervalID -> Interval

-- | Return the set of possible constraints/relations between two
--   intervals.
getConstraints :: IntervalID -> IntervalID -> Allen RelationBits


-- | <ul>
--   <li>Module : Data.Allen</li>
--   <li>Description : Main module for Allen's interval algebra.</li>
--   <li>Maintainer : Archaversine |</li>
--   </ul>
module Data.Allen

-- | Return the resulting interval graph of an allen computation
execAllen :: Allen a -> IntervalGraph

-- | Return the result of an allen computation
evalAllen :: Allen a -> a

-- | Return the result of an allen computation and the resulting interval
--   graph
runAllen :: Allen a -> (a, IntervalGraph)
